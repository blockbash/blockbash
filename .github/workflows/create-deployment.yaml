# ##############################################################################
# PURPOSE: Primary deployment for the blockbash platform
# - Conventions:
#   - Don't do job-level IF statements. This makes downstream jobs (with needs statements) challenging to maintain because the needs statement won't execute (if the upstream job is skipped). Yes, you can force a job to not evaluate needs with an always(), but this can cause unexpected behavior as a downstream job will run if a needs step failed (https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idif). Thus, we do if statements for every step in the job to make the job return "success" (even if no steps executed) https://github.com/orgs/community/discussions/82744
# ##############################################################################

name: create_deployment
# permissions: Disable default permissions (at the workflow-level), so we can set them with granularity at the job-level
permissions: {}
run-name: "create_deployment: ${{ github.head_ref }} by ${{ github.actor }}"

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - develop
      - main
  # schedule: (https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule)
  # In a public repository, scheduled workflows are automatically disabled when no repository activity has occurred in 60 days.
  # This event will only trigger a workflow run if the workflow file is on the default branch.
  # Scheduled workflows will only run on the default branch.
  schedule: # Execute at daily at 4:30 am UTC (12:30 am EST)
    - cron: "30 4 * * *"
defaults:
  run:
    shell: bash -Eeu -o pipefail {0}

jobs:
  global:
    permissions:
      contents: read
    uses: ./.github/workflows/global.yaml

  create_base_images:
    needs: global
    permissions:
      contents: read
      # packages: Need ability to push images to Github
      packages: write
    secrets:
      COSIGN_KEY_BASE64: ${{ secrets.COSIGN_KEY_BASE64 }}
      COSIGN_PASSWORD_BASE64: ${{ secrets.COSIGN_PASSWORD_BASE64 }}
      _GITHUB_TOKEN: "${{ (secrets.GITHUB_TOKEN != '' && secrets.GITHUB_TOKEN) || needs.global.outputs.null_credential }}"
    strategy:
      matrix:
        container: ${{ fromJSON(needs.global.outputs.create_base_images_container_matrix_json_string) }}
        target_arch: ${{ fromJSON(needs.global.outputs.target_archs_json_string) }}
    uses: ./.github/workflows/create-base-images.yaml
    with:
      dockerfile_path: ${{ matrix.container.dockerfile_path }}
      image_name_short: ${{ matrix.container.image_name_short }}
      is_enabled: ${{ fromJSON(needs.global.outputs.primary_json_string)['activate_create_base_images_job'] }}
      primary_json_string: ${{ needs.global.outputs.primary_json_string }}
      target_arch: ${{ matrix.target_arch }}

  create_challenge_environments:
    needs:
      - global
      - create_base_images
    permissions:
      contents: read
      # packages: Need ability to push images to Github
      packages: write
    secrets:
      COSIGN_KEY_BASE64: ${{ secrets.COSIGN_KEY_BASE64 }}
      COSIGN_PASSWORD_BASE64: ${{ secrets.COSIGN_PASSWORD_BASE64 }}
      _GITHUB_TOKEN: "${{ (secrets.GITHUB_TOKEN != '' && secrets.GITHUB_TOKEN) || needs.global.outputs.null_credential }}"
    strategy:
      matrix:
        challenge_environment_dir_path: ${{ fromJSON(needs.global.outputs.challenge_environments_dir_paths_json_string) }}
        target_arch: ${{ fromJSON(needs.global.outputs.target_archs_json_string) }}
    uses: ./.github/workflows/create-challenge-environments.yaml
    with:
      challenge_environment_dir_path: ${{ matrix.challenge_environment_dir_path }}
      is_enabled: ${{ fromJSON(needs.global.outputs.primary_json_string)['activate_create_challenge_environments_job'] }}
      primary_json_string: ${{ needs.global.outputs.primary_json_string }}
      target_arch: ${{ matrix.target_arch }}

  create_matrix_outputs:
    needs:
      - create_base_images
      - create_challenge_environments
      - global
    permissions:
      contents: read
    uses: ./.github/workflows/create-matrix-outputs.yaml
    with:
      is_enabled: ${{ fromJSON(needs.global.outputs.primary_json_string)['activate_create_matrix_outputs_job'] }}
      primary_json_string: ${{ needs.global.outputs.primary_json_string }}

  create_multi_arch_images:
    needs:
      - create_matrix_outputs
      - global
    permissions:
      contents: read
      # packages: Need ability to push images to Github
      packages: write
    secrets:
      _GITHUB_TOKEN: ${{ (secrets.GITHUB_TOKEN != '' && secrets.GITHUB_TOKEN) || needs.global.outputs.null_credential }}
    uses: ./.github/workflows/create-multi-arch-images.yaml
    with:
      is_enabled: ${{ fromJSON(needs.global.outputs.primary_json_string)['activate_create_multi_arch_images_job'] }}
      primary_json_string: ${{ needs.global.outputs.primary_json_string }}

  create_challenge_repos:
    needs:
      - create_multi_arch_images
      - global
    permissions:
      contents: read
    secrets:
      BLOCKBASH_APP_PRIVATE_KEY_BASE64: ${{ secrets.BLOCKBASH_APP_PRIVATE_KEY_BASE64 }}
    strategy:
      matrix:
        challenge_dir_path: ${{ fromJSON(needs.global.outputs.challenge_environments_dir_paths_json_string) }}
    uses: ./.github/workflows/create-challenge-repos.yaml
    with:
      challenge_dir_path: ${{ matrix.challenge_dir_path }}
      primary_json_string: ${{ needs.global.outputs.primary_json_string }}
      is_enabled: ${{ fromJSON(needs.global.outputs.primary_json_string)['activate_create_challenge_repos_job'] }}

  create_front_end:
    needs:
      - create_challenge_repos
      - global
    permissions:
      contents: read
    secrets:
      CLOUDFLARE_TOKEN_BASE64: ${{ secrets.CLOUDFLARE_TOKEN_BASE64 }}
    uses: ./.github/workflows/create-front-end.yaml
    with:
      is_enabled: ${{ fromJSON(needs.global.outputs.primary_json_string)['activate_create_front_end_job'] }}
      primary_json_string: ${{ needs.global.outputs.primary_json_string }}
