#!/usr/bin/env bash

# ##############################################################################
: << COMMENT

PURPOSE: Execute code formatters
- Executed as a precommit hook on staged files
- Executed during "bb-site" to format solidity files.  This helps with local development.
- Can be executed as a stand alone command to format all files in project.

COMMENT
# ##############################################################################

# shellcheck source=./../../../packages/common/scripts/source-all.sh

script_dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
# shellcheck source=./../shared.sh
. "${script_dir}/../shared.sh"

staged_files_only="${false}"
website_files_only="${false}"

#The while loop will continue as long as there are arguments to process.
while [[ $# -gt 0 ]]; do
  argument_name="${1}"
  case "${argument_name}" in
    --staged-files-only=*)
      # If true, will only format git staged files
      # Defaults to false
      flag_name="$(get_cli_flag_name "${argument_name}")"
      flag_value="$(get_cli_flag_value "${argument_name}")"

      staged_files_only="${flag_value}"
      log_debug "Setting ${flag_name} to: ${staged_files_only}"
      ;;
    --website-files-only=*)
      # If true, will only format files that are displayed on website
      # This is helpful in local development (e.g., using "bb-site")
      # Defaults to false
      flag_name="$(get_cli_flag_name "${argument_name}")"
      flag_value="$(get_cli_flag_value "${argument_name}")"

      website_files_only="${flag_value}"
      log_debug "Setting ${flag_name} to: ${staged_files_only}"
      ;;
    *)
      flag_name="$(get_cli_flag_name "${argument_name}")"
      die "${flag_name} is not a valid argument"
      ;;
  esac
  unset argument_name flag_value flag_name
  shift
done

main() {
  cd "${blockbash_root_dir_path}" || die "Couldn't cd into ${blockbash_root_dir_path}"

  local prettier_glob_pattern eslint_glob_pattern

  # ##############################################################################
  : << COMMENT

**/*.sol: The lab environment bundles a VSCode solidity extension. This extension uses prettier-plugin-solidity for .sol formatting.  By declaring prettier-plugin-solidity within the prettierrc, we can keep the formatting consistent.

COMMENT
  # ##############################################################################

  if [[ ${website_files_only} == "${true}" ]]; then
    prettier_glob_pattern=(
      "**/*.sol"
    )
    eslint_glob_pattern=(
      ""
    )
  else
    # **/*.env will be formatted via prettier-plugin-sh
    # Prettier plugins defined in .prettierrc
    prettier_glob_pattern=(
      "**/*.sol"
      "**/*.sh"
      "**/*.env"
      "${utils_commands_dir_path}/*"
      "${lab_shell_scripts_aliases_dir_path}/*"
    )
    # Should match patterns in .eslintrc.js files
    eslint_glob_pattern=(
      "**/*.js"
      "**/*.jsx"
      "**/*.ts"
      "**/*.tsx"
      "**/*.html"
      "**/*.md"
      "**/*.json"
      "**/*.json5"
      "**/*.yml"
      "**/*.yaml"
    )
  fi

  if [[ ${staged_files_only} == "${true}" ]]; then
    local glob_pattern relative_paths temp_glob_pattern=()

    for glob_pattern in "${prettier_glob_pattern[@]}"; do
      relative_paths="$(get_staged_relative_paths "${glob_pattern}")"
      if ! is_empty "${relative_paths}"; then
        temp_glob_pattern+=("$(get_staged_relative_paths "${glob_pattern}")")
      fi
    done
    prettier_glob_pattern=("${temp_glob_pattern[@]}")

    temp_glob_pattern=()
    for glob_pattern in "${eslint_glob_pattern[@]}"; do
      temp_glob_pattern+=("$(get_staged_relative_paths "${glob_pattern}")")
    done
    eslint_glob_pattern=("${temp_glob_pattern[@]}")
  fi

  log_info "Generated prettier file patterns..."
  log_info "${prettier_glob_pattern[*]}"

  log_info "Invoking prettier"
  # get_staged_relative_paths can return multiple paths.  We can't pass them as a single string
  # shellcheck disable=SC2068
  if [ ${#prettier_glob_pattern[@]} -gt 0 ]; then
    pnpm exec prettier "${prettier_glob_pattern[@]}" \
      --write \
      --ignore-path "${gitignore_file_path}" \
      --no-error-on-unmatched-pattern
  else
    log_info "prettier_glob_pattern has no elements. Skipping prettier execution."
  fi

  log_info "Generated eslint file patterns..."
  log_info "${eslint_glob_pattern[*]}"

  log_info "Invoking eslint"
  # get_staged_relative_paths can return multiple paths.  We can't pass them as a single string
  # shellcheck disable=SC2068
  # "|| true": Eslint will fail if linting rules are violated and the offending code can't be automatically fixed.
  #  pnpm exec eslint ${eslint_glob_pattern} --ignore-path .gitignore --fix || true
  if [ ${#eslint_glob_pattern[@]} -gt 0 ]; then
    pnpm exec eslint ${eslint_glob_pattern[@]} \
      --ignore-path "${gitignore_file_path}" \
      --no-error-on-unmatched-pattern || true
  else
    log_info "eslint_glob_pattern has no elements. Skipping execution."
  fi
}
# https://unix.stackexchange.com/a/333204
# Pipes stderr to terminal (and log file)
exec 3>&1
main 2>&1 >&3 | tee -a "${bash_log_file_path}"
